"A rule for running apko with prepopulated cache"

_DOC = """Build OCI images from APK packages directly without Dockerfile

This rule creates Alpine images using the 'apko.yaml' configuration file and relies on cache contents generated by [translate_lock](./translate_lock.md) to be fast.

```starlark
apko_image(
    name = "example",
    config = "apko.yaml",
    contents = "@example_lock//:contents",
    tag = "example:latest",
)
```

The label `@example_lock//:contents` is generated by the `translate_lock` extension, which consumes an 'apko.resolved.json' file. 
For more details, refer to the [documentation](./docs/apko-cache.md).

An example demonstrating usage with [rules_oci](https://github.com/bazel-contrib/rules_oci)

```starlark
apko_image(
    name = "alpine_base",
    config = "apko.yaml",
    contents = "@alpine_base_lock//:contents",
    tag = "alpine_base:latest",
)

oci_image(
    name = "app",
    base = ":alpine_base"
)
```

For more examples checkout the [examples](/examples) directory.
"""

_ATTRS = {
    "contents": attr.label(doc = "Label to the contents repository generated by translate_lock. See [apko-cache](./apko-cache.md) documentation.", mandatory = True),
    "config": attr.label(doc = "Label to the `apko.yaml` file.", allow_single_file = True, mandatory = True),
    "output": attr.string(default = "oci", values = ["oci", "docker"]),
    "architecture": attr.string(doc = "the CPU architecture which this image should be built to run on. See https://github.com/chainguard-dev/apko/blob/main/docs/apko_file.md#archs-top-level-element"),
    "tag": attr.string(doc = "tag to apply to the resulting docker tarball. only applicable when `output` is `docker`", mandatory = True),
    "args": attr.string_list(doc = "additional arguments to provide when running the `apko build` command."),
}

def _impl(ctx):
    apko_info = ctx.toolchains["@rules_apko//apko:toolchain_type"].apko_info

    cache_name = "cache_{}".format(ctx.label.name)

    if ctx.attr.output == "oci":
        output = ctx.actions.declare_directory(ctx.label.name)
    else:
        output = ctx.actions.declare_file("{}.tar".format(ctx.label.name))

    args = ctx.actions.args()
    args.add("build")
    args.add(ctx.file.config.path)
    args.add(ctx.attr.tag)
    args.add(output.path)

    args.add("--vcs=false")

    args.add_all(ctx.attr.args)

    args.add("--cache-dir={}/{}/{}".format(ctx.bin_dir.path, ctx.label.package, cache_name))
    args.add("--offline")

    if ctx.attr.architecture:
        args.add("--arch")
        args.add(ctx.attr.architecture)

    inputs = [ctx.file.config] + ctx.files.contents

    for content in ctx.files.contents:
        content_owner = content.owner.workspace_name
        content_cache_entry_key = content.path[content.path.find(content_owner) + len(content_owner) + 1:]
        content_entry = ctx.actions.declare_file("/".join([cache_name, content_cache_entry_key]))
        ctx.actions.symlink(
            target_file = content,
            output = content_entry,
        )
        inputs.append(content_entry)

    ctx.actions.run(
        executable = apko_info.binary,
        arguments = [args],
        inputs = inputs,
        outputs = [output],
    )

    return DefaultInfo(
        files = depset([output]),
    )

apko_image_lib = struct(
    attrs = _ATTRS,
    documentation = _DOC,
    implementation = _impl,
    toolchains = ["@rules_apko//apko:toolchain_type"],
)

apko_image = rule(
    implementation = apko_image_lib.implementation,
    attrs = apko_image_lib.attrs,
    toolchains = apko_image_lib.toolchains,
    doc = apko_image_lib.documentation,
)
